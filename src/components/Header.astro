---
import { Icon } from 'astro-icon/components';

const currentPath = Astro.url.pathname;

// Tailwind classes for active and inactive navigation links
const activeLinkClasses = 'border-b-2 border-amber-400 text-stone-100';
const inactiveLinkClasses = 'text-stone-400 hover:text-stone-100';
const contactInactiveLinkClasses = 'text-amber-400 hover:text-amber-300'; // Specific hover for contact link

const isActive = (href: string) => {
  // Use an exact match for the homepage
  if (href === '/') {
    return currentPath === '/';
  }
  // Use startsWith for all other pages to highlight parent sections
  return currentPath.startsWith(href);
};

const navLinks = [
  {
    href: '/pfas-alternatives-sourcing',
    text: 'PFAS-Free Sourcing',
    mobileText: 'PFAS Sourcing',
  },
  { href: '/pfas-management-services', text: 'PFAS Management' },
  { href: '/intelligence', text: 'Intelligence' },
  { href: '/working-with-us', text: 'Working With Us' },
  { href: '/about', text: 'About' },
];

const contactLink = {
  href: '/contact',
  text: 'Contact â†’',
};
---

<header
  class="fixed left-0 right-0 top-0 z-50 border-b border-stone-800/50 bg-stone-900/80 backdrop-blur-md"
>
  <nav class="mx-auto max-w-7xl px-6 lg:px-12">
    <div class="flex h-16 items-center justify-between lg:h-20">
      <!-- Logo with Dot -->
      <a href="/" class="group flex items-center gap-1">
        <span
          class="text-xl font-black tracking-tight text-stone-100 transition-colors duration-300 group-hover:text-amber-200 lg:text-2xl"
        >
          lotus nano
        </span>
        <span
          class="text-xl font-black leading-none text-teal-500 lg:-mt-2 lg:text-4xl"
          >.</span
        >
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden items-center gap-8 lg:flex">
        {
          navLinks.map((link) => (
            <a
              href={link.href}
              class:list={[
                'pb-2 text-sm font-medium transition-colors duration-300',
                isActive(link.href) ? activeLinkClasses : inactiveLinkClasses,
              ]}
            >
              {link.text}
            </a>
          ))
        }

        <!-- Contact CTA -->
        <a
          href={contactLink.href}
          class:list={[
            'pb-2 text-sm font-semibold transition-colors duration-300',
            isActive(contactLink.href)
              ? activeLinkClasses
              : contactInactiveLinkClasses,
          ]}
        >
          {contactLink.text}
        </a>
      </div>

      <!-- Mobile Menu Toggle -->
      <button
        id="mobile-menu-toggle"
        class="text-stone-400 transition-colors duration-300 hover:text-stone-100 lg:hidden"
        aria-label="Toggle menu"
      >
        <Icon name="mdi:menu" class="h-6 w-6" />
      </button>
    </div>
  </nav>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="hidden border-t border-stone-800/50 bg-stone-900/95 backdrop-blur-md lg:hidden"
  >
    <div class="mx-auto max-w-7xl space-y-4 px-6 py-6">
      {
        navLinks
          .filter((link) => link.href !== '/working-with-us')
          .map((link) => (
            <a
              href={link.href}
              class:list={[
                'block text-base font-medium transition-colors duration-300',
                isActive(link.href) ? activeLinkClasses : inactiveLinkClasses,
              ]}
            >
              {link.mobileText || link.text}
            </a>
          ))
      }

      <a
        href={contactLink.href}
        class:list={[
          'block border-t border-stone-800/50 pt-4 text-base font-semibold transition-colors duration-300',
          isActive(contactLink.href)
            ? activeLinkClasses
            : contactInactiveLinkClasses,
        ]}
      >
        {contactLink.text}
      </a>
    </div>
  </div>
</header>

<script>
  const toggle = document.getElementById('mobile-menu-toggle');
  const menu = document.getElementById('mobile-menu');

  toggle?.addEventListener('click', () => {
    menu?.classList.toggle('hidden');
  });

  // Close menu when clicking outside
  document.addEventListener('click', (e) => {
    if (
      !toggle?.contains(e.target as Node) &&
      !menu?.contains(e.target as Node)
    ) {
      menu?.classList.add('hidden');
    }
  });
</script>
